// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Prisma Models

// User Model
model User {
  id Int @id @default(autoincrement())

  username String   @db.VarChar(255) @unique
  password String
  type     UserType @default(USER)
  tokenVersion Int @default(0)

  orders      Order[]
  restaurants Restaurant[]

  blockedBy UserOnRestaurant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  USER
  RESTAURANT_OWNER
  SUPERUSER
}

// Restaurant Model

model Restaurant {
  id Int @id @default(autoincrement())

  name        String @db.VarChar(255)
  description String

  orders Order[]
  meals  Meal[]

  blockedUser UserOnRestaurant[]

  user User @relation(fields: [userId], references: [id])

  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Meal Model
model Meal {
  id Int @id @default(autoincrement())

  name        String @db.VarChar(255)
  description String
  price       Float

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  restaurantId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders MealsOnOrder[]
}

// Order Model
model Order {
  id Int @id @default(autoincrement())

  user       User       @relation(fields: [userId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  statuses OrderStatus[]

  userId       Int
  restaurantId Int

  total Float @default(0)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  meals MealsOnOrder[]
}

// OrderStatus Model

model OrderStatus {
  id Int @id @default(autoincrement())

  status OrderStatusType @default(PLACED)

  order Order @relation(fields: [orderId], references: [id])

  orderId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatusType {
  PLACED
  CANCELED
  PROCESSING
  IN_ROUTE
  DELIVERED
  RECEIVED
}

// Many to Many For Meal - Order
model MealsOnOrder {
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  meal   Meal @relation(fields: [mealId], references: [id])
  mealId Int

  quantity Int @default(1)

  @@id([orderId, mealId])
}

// Many to Many For Blocking
model UserOnRestaurant {
  user User @relation(fields: [userId], references: [id])
  userId Int

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  @@id([userId, restaurantId])
}